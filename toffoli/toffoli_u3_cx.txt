from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
from numpy import pi

qreg_q = QuantumRegister(3, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)

circuit.barrier(qreg_q[2])
circuit.u(pi / 2, 0, pi, qreg_q[2])
circuit.barrier(qreg_q[1])
circuit.barrier(qreg_q[0])
circuit.cx(qreg_q[1], qreg_q[2])
circuit.u(0, 0, -pi / 4, qreg_q[2])
circuit.cx(qreg_q[0], qreg_q[2])
circuit.u(0, 0, pi / 4, qreg_q[2])
circuit.cx(qreg_q[1], qreg_q[2])
circuit.u(0, 0, -pi / 4, qreg_q[2])
circuit.cx(qreg_q[0], qreg_q[2])
circuit.cx(qreg_q[0], qreg_q[1])
circuit.u(0, 0, pi / 4, qreg_q[2])
circuit.u(pi / 2, 0, pi, qreg_q[2])
circuit.u(0, 0, -pi / 4, qreg_q[1])
circuit.u(0, 0, pi / 4, qreg_q[0])
circuit.cx(qreg_q[0], qreg_q[1])



OPENQASM 2.0;
include "qelib1.inc";

qreg q[3];
creg c[4];
barrier q[2];
u(pi / 2, 0, pi) q[2];
barrier q[1];
barrier q[0];
cx q[1], q[2];
u(0, 0, -pi/4) q[2];
cx q[0], q[2];
u(0, 0, pi/4) q[2];
cx q[1], q[2];
u(0, 0, -pi/4) q[2];
cx q[0], q[2];
cx q[0], q[1];
u(0, 0, pi/4) q[2];
u(pi / 2, 0, pi) q[2];
u(0, 0, -pi/4) q[1];
u(0, 0, pi/4) q[0];
cx q[0], q[1];