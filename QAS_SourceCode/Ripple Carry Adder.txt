import numpy as np

# Importing standard Qiskit libraries
from qiskit import QuantumCircuit, transpile, Aer, IBMQ
from qiskit.tools.jupyter import *
from qiskit.visualization import *
from ibm_quantum_widgets import *
from qiskit.providers.aer import QasmSimulator

# Loading your IBM Quantum account(s)
provider = IBMQ.load_account()

qc = QuantumCircuit(6)

qc.barrier()
qc.cx(3,1)
qc.cx(1,0)
qc.cx(2,4)
qc.ccx(0,3,1)
qc.cx(2,1)
qc.ccx(1,4,2)
qc.cx(2,5)
qc.ccx(1,4,2)
qc.cx(2,1)
qc.cx(4,1)
qc.ccx(0,4,1)
qc.cx(1,0)
qc.cx(0,3)

provider = IBMQ.get_provider(hub ='ibm-q', group='open', project='main')
backend = provider.get_backend('ibm_oslo')

re_transpile=transpile(qc, backend)
re_transpile.draw(output='mpl', idle_wires=False)

#input------------------
#qc.x(1) #a0
# qc.x(2) #a1
# qc.x(3) #b0
# qc.x(4) #b1
#------------------------

re_transpile.barrier()
qc.barrier()
re_transpile.measure_all()
qc.measure_all()

from qiskit.providers.aer import AerSimulator
from qiskit.visualization import plot_histogram

provider = IBMQ.get_provider(hub ='ibm-q', group='open', project='main')
backend = provider.get_backend('simulator_statevector')

simulator = QasmSimulator()
job = simulator.run(re_transpile, shots=10000)
result = job.result()
counts = result.get_counts(re_transpile)
print("transpiled circuit : ", counts)
job = simulator.run(qc, shots=10000)
result = job.result()
counts = result.get_counts(qc)
print("original circuit : ", counts)